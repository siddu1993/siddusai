{"version":3,"sources":["webpack:///./src/app/register/register.module.ts","webpack:///./src/app/register/register.page.html","webpack:///./src/app/register/register.page.scss","webpack:///./src/app/register/register.page.ts"],"names":[],"mappings":"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","file":"register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-button (click)=\\\"back()\\\" >\\n            <ion-icon name=\\\"arrow-back\\\"  ></ion-icon>\\n          </ion-button>\\n        </ion-buttons>\\n    <ion-title>Patient Registration</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <form [formGroup]=\\\"validations_form\\\" >\\n\\n    <ion-card>\\n\\n        <ion-grid>\\n    \\n          <ion-row>\\n          <ion-col size=\\\"6\\\">\\n           \\n            <ion-item>\\n              <ion-label  position=\\\"floating\\\" ><small>full_name</small></ion-label>\\n              <ion-input formControlName=\\\"full_name\\\"  ></ion-input>\\n              \\n            </ion-item>\\n            <ng-container *ngFor=\\\"let validation of validation_messages.full_name\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('full_name').hasError(validation.type) && (validations_form.get('full_name').dirty || validations_form.get('full_name').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n              </ion-col>\\n              <ion-col size=\\\"6\\\">\\n           \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" ><small>Password</small></ion-label>\\n                  <ion-input formControlName=\\\"password\\\"  ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n\\n          <ion-col>\\n           \\n        <ion-item >\\n          <ion-label  position=\\\"floating\\\" ><small>Age</small></ion-label>\\n          <ion-input type=\\\"number\\\" formControlName=\\\"age\\\"  ></ion-input>\\n          \\n        </ion-item>\\n        <ng-container *ngFor=\\\"let validation of validation_messages.age\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('age').hasError(validation.type) && (validations_form.get('age').dirty || validations_form.get('age').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n            </div>\\n          </ng-container>\\n          </ion-col>\\n        </ion-row>\\n          <ion-row>\\n          <ion-col>\\n           \\n            <ion-item >\\n              <ion-label  position=\\\"floating\\\" ><small>Gender</small></ion-label>\\n              <ion-select  formControlName=\\\"sex\\\" \\n             >\\n              <ion-select-option value=\\\"Male\\\">Male</ion-select-option>\\n              <ion-select-option value=\\\"Female\\\">Female</ion-select-option>\\n          \\n              </ion-select>\\n              \\n            </ion-item>\\n            <ng-container *ngFor=\\\"let validation of validation_messages.sex\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('sex').hasError(validation.type) && (validations_form.get('sex').dirty || validations_form.get('sex').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n              </ion-col>\\n              </ion-row>\\n  \\n        \\n\\n          <ion-row>\\n              <ion-col size=\\\"6\\\">\\n               \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" >Date of birth</ion-label>\\n                  <ion-datetime formControlName=\\\"date_of_birth\\\" displayFormat=\\\"DD-MM-YY\\\" placeholder=\\\"Select Date\\\"></ion-datetime>\\n                </ion-item>\\n\\n                \\n                <ng-container *ngFor=\\\"let validation of validation_messages.date_of_birth\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('date_of_birth').hasError(validation.type) && (validations_form.get('date_of_birth').dirty || validations_form.get('date_of_birth').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n                  <ion-col size=\\\"6\\\">\\n               \\n                    <ion-item >\\n                      <ion-label  position=\\\"floating\\\" ><small>State</small></ion-label>\\n                      <ion-input  formControlName=\\\"state\\\"  ></ion-input>\\n                      \\n                    </ion-item>\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                        </div>\\n                      </ng-container>\\n        \\n        \\n                      </ion-col>\\n          </ion-row>\\n          <ion-row>\\n                      <ion-col size=\\\"6\\\">\\n                   \\n               \\n                        <ion-item>\\n                          <ion-label position=\\\"floating\\\" ><small>City</small></ion-label>\\n                          <ion-input   formControlName=\\\"city\\\" ></ion-input>\\n                          \\n                        </ion-item>\\n      \\n                        <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n                            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n                              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                            </div>\\n                          </ng-container>\\n                      </ion-col>\\n        \\n           \\n                <ion-col size=\\\"6\\\">\\n                 \\n                  <ion-item>\\n                    <ion-label  position=\\\"floating\\\" ><small>Email Id</small></ion-label>\\n                    <ion-input type=\\\"email\\\" formControlName=\\\"email\\\" ></ion-input>\\n                    \\n                  </ion-item>\\n\\n                  <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                      </div>\\n                    </ng-container>\\n                    </ion-col>\\n          \\n                <ion-col>\\n                 \\n              <ion-item >\\n                <ion-label position=\\\"floating\\\" ><small>Address</small></ion-label>\\n                <ion-input   formControlName=\\\"address\\\"  ></ion-input>\\n                \\n              </ion-item>\\n              <ng-container *ngFor=\\\"let validation of validation_messages.address\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('address').hasError(validation.type) && (validations_form.get('address').dirty || validations_form.get('address').touched)\\\">\\n                    <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                  </div>\\n                </ng-container>\\n                </ion-col>\\n          \\n              </ion-row>\\n              <ion-row>\\n                \\n                    <ion-col size=\\\"6\\\">\\n                   \\n               \\n                      <ion-item>\\n                        <ion-label slot=\\\"start\\\"  ><small>Insurance</small></ion-label>\\n                        <ion-checkbox slot=\\\"end\\\" formControlName=\\\"insurance\\\"></ion-checkbox>\\n                        \\n                      </ion-item>\\n    \\n                      <ng-container *ngFor=\\\"let validation of validation_messages.insurance\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('insurance').hasError(validation.type) && (validations_form.get('insurance').dirty || validations_form.get('insurance').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                    </ion-col>\\n                 \\n            \\n                 \\n                    <ion-col size=\\\"6\\\">\\n                   \\n               \\n                      <ion-item>\\n                        <ion-label slot=\\\"start\\\"  ><small>phone_no</small></ion-label>\\n                        <ion-input  type=\\\"number\\\" formControlName=\\\"phone_no\\\"  ></ion-input>\\n                        \\n                      </ion-item>\\n    \\n                      <ng-container *ngFor=\\\"let validation of validation_messages.phone_no\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('phone_no').hasError(validation.type) && (validations_form.get('phone_no').dirty || validations_form.get('phone_no').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                    </ion-col>\\n                  </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n           \\n                      <ion-item >\\n                        <ion-label  position=\\\"floating\\\" ><small>security question</small></ion-label>\\n                        <ion-select  formControlName=\\\"question\\\" \\n                       >\\n                        <ion-select-option *ngFor=\\\"let obj of ques\\\" >{{obj.question}}</ion-select-option>\\n                    \\n                        </ion-select>\\n                        \\n                      </ion-item>\\n                      <ng-container *ngFor=\\\"let validation of validation_messages.quest\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('quest').hasError(validation.type) && (validations_form.get('quest').dirty || validations_form.get('quest').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                        </ion-col>\\n\\n                        <ion-col >\\n           \\n                          <ion-item >\\n                            <ion-label  position=\\\"floating\\\" ><small>anwer</small></ion-label>\\n                            <ion-input   formControlName=\\\"answer\\\"  ></ion-input>\\n                            \\n                          </ion-item>\\n                          <ng-container *ngFor=\\\"let validation of validation_messages.answer\\\">\\n                              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('answer').hasError(validation.type) && (validations_form.get('answer').dirty || validations_form.get('answer').touched)\\\">\\n                                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                              </div>\\n                            </ng-container>\\n                            </ion-col>\\n            \\n                </ion-row>\\n\\n               \\n                <div text-center>\\n                    <ion-button (click)=\\\"register(validations_form)\\\" [disabled]=\\\"!validations_form.valid\\\" fill=\\\"outline\\\" shape=\\\"round\\\"><small>Save</small></ion-button>\\n                   \\n                            \\n                  </div>   \\n              \\n        \\n    </ion-grid>\\n      </ion-card>\\n     \\n        </form>\\n</ion-content>\\n\\n\"","module.exports = \".i-button {\\n  height: 28px; }\\n\\n.cenimg {\\n  height: 71px;\\n  padding-top: 10px; }\\n\\n.sele {\\n  padding-top: 30px; }\\n\\nion-icon {\\n  color: #ffffff !important; }\\n\\n.error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\nsmall {\\n  font-size: 63%; }\\n\\nion-toolbar {\\n  --background: #138D75!important ;\\n  opacity: 1 !important; }\\n\\nion-card {\\n  border: 2px solid grey; }\\n\\n.psw {\\n  color: skyblue; }\\n\\n.ion-content {\\n  overflow: hidden; }\\n\\nion-title {\\n  color: #ffffff !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvRDpcXG5ld2FwcG9sb1xcYXBwb2xvL3NyY1xcYXBwXFxyZWdpc3RlclxccmVnaXN0ZXIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFDSixFQUFBOztBQUNBO0VBQ0ksWUFBWTtFQUNaLGlCQUFnQixFQUFBOztBQUVwQjtFQUNJLGlCQUFpQixFQUFBOztBQUVyQjtFQUNJLHlCQUEwQixFQUFBOztBQUU5QjtFQUVFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQixFQUFBOztBQUVsQjtFQUNJLGNBQWMsRUFBQTs7QUFFbEI7RUFDSSxnQ0FBYTtFQUNiLHFCQUFtQixFQUFBOztBQUV2QjtFQUNJLHNCQUFzQixFQUFBOztBQUd6QjtFQUNJLGNBQWEsRUFBQTs7QUFFakI7RUFDRCxnQkFBZ0IsRUFBQTs7QUFFZjtFQUNHLHlCQUEwQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmktYnV0dG9ue1xyXG4gICAgaGVpZ2h0OjI4cHhcclxufVxyXG4uY2VuaW1ne1xyXG4gICAgaGVpZ2h0OiA3MXB4OyBcclxuICAgIHBhZGRpbmctdG9wOjEwcHg7XHJcbn1cclxuLnNlbGV7XHJcbiAgICBwYWRkaW5nLXRvcDogMzBweDtcclxufVxyXG5pb24taWNvbntcclxuICAgIGNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQgOyBcclxufVxyXG4uZXJyb3ItbWVzc2FnZVxyXG57XHJcbiAgY29sb3I6IHJlZDtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5zbWFsbCB7XHJcbiAgICBmb250LXNpemU6IDYzJTtcclxufVxyXG5pb24tdG9vbGJhcntcclxuICAgIC0tYmFja2dyb3VuZDogIzEzOEQ3NSFpbXBvcnRhbnQgO1xyXG4gICAgb3BhY2l0eToxIWltcG9ydGFudDsgXHJcbn1cclxuaW9uLWNhcmQge1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JleTtcclxuXHJcbiB9XHJcbiAucHN3e1xyXG4gICAgIGNvbG9yOnNreWJsdWU7XHJcbiB9XHJcbiAuaW9uLWNvbnRlbnR7XHJcbm92ZXJmbG93OiBoaWRkZW47XHJcbiB9XHJcbiBpb24tdGl0bGV7XHJcbiAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50IDsgXHJcbn0iXX0= */\"","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { NavParams, ModalController, NavController } from '@ionic/angular';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  @Input() value: number;\n  id: any;\n  public validations_form: FormGroup;\n  result: any;\n  ques: any;\n\n  constructor(public modalController:ModalController,public auth:AuthService,public formBuilder: FormBuilder,\n    public nav:NavController) { \n    // this.id= navParams.get(\"value\");\n    // console.log(this.id);\n   this.validations_form = formBuilder.group({\n\n    full_name: ['',Validators.required],\n    date_of_birth: ['',Validators.required],\n    email: ['',Validators.required],\n    address: ['',Validators.required],\n    city: ['',Validators.required],\n    state:['',Validators.required],\n    sex:['',Validators.required],\n    age: ['',Validators.required],\n    phone_no:['',Validators.required],\n    password:['',Validators.required],\n    question:['',Validators.required],\n    answer:['',Validators.required],\n    insurance: [false]\n  \n    \n\n   \n});\n\n  }\n\n  ngOnInit() {\n  this.question();\n  }\n\n  register(validations_form) {\n    this.auth.presentLoading();\n    console.log(56, validations_form.value)\n      this.auth.newpatient(validations_form.value).subscribe(res => {\n       this.result=res;\n     \n        if (res.status == 'success') {\n         this.auth.presentToast(\"registered  successfully\");\nthis.nav.pop();\n        }\n      \n     \n     \n       console.log(JSON.stringify(this.result))\n    }, (err) => {\n      console.log(err)\n    if(err.error.message.code==\"11000\")\n    {\n      this.auth.presentToast(\"phone number already registered\");\n\n    }\n    else{\n     this.auth.presentToast(err.error.message.error);\n    }\n   });\n    \n  }\n\n  validation_messages = {\n    'insurance': [\n      // { type: 'required', message: 'upc is required.' },\n      { type: 'minlength', message: 'insurence must be at least 1 characters long.' },\n      { type: 'maxlength', message: 'insurence cannot be more than 20 characters long.' },\n     // { type: 'validUsername', message: 'Your insurence has already been taken.' }\n    ],\n    'full_name': [\n      { type: 'required', message: 'name is required.' },\n      { type: 'minlength', message: 'name must be at least 1 characters long.' },\n      //{ type: 'pattern', message: 'Your password must contain only numbers and letters.' },\n    ],\n    'age': [\n      { type: 'required', message: 'age is required.' },],\n      'sex': [\n        { type: 'required', message: 'sex is required.' },],\n\n    'email': [\n        { type: 'required', message: 'phone is required.' }],\n    'date_of_birth': [\n          { type: 'required', message: 'date_of_birth is required.' },\n        ],\n    'email_id': [\n            { type: 'required', message: 'email_id is required.' }\n           ],\n    'address': [\n              { type: 'required', message: 'address  is required.' }],\n              'city': [\n                { type: 'required', message: 'city  is required.' }],\n                'state': [\n                   { type: 'required', message: 'state  is required.' }],\n                   'phone_no': [\n                    { type: 'required', message: 'phone_no  is required.' }],\n                    'password': [\n                      { type: 'required', message: 'password  is required.' }],\n                      'quest'  : [{ type: 'required', message: 'select security question is required.' }],\n                      'answer'  : [{ type: 'required', message: 'answer is required' }]\n                  \n  };\n  back()\n  {\n   this.nav.pop() //this.dismiss()\n  }\n\n  question() {\n    this.auth.presentLoading();\n      this.auth.quest().subscribe(res => {\n       this.ques=res.response;\n     \n       \n     \n     \n       console.log(JSON.stringify(this.ques))\n    }, (err) => {\n      console.log(err)\n    if(err.error.message.code==\"11000\")\n    {\n      this.auth.presentToast(\"err\");\n\n    }\n    else{\n     this.auth.presentToast(err.error.message.error);\n    }\n   });\n    \n  }\n}\n"],"sourceRoot":""}