{"version":3,"sources":["webpack:///./src/app/doctor/docregiser/docregiser.module.ts","webpack:///./src/app/doctor/docregiser/docregiser.page.html","webpack:///./src/app/doctor/docregiser/docregiser.page.scss","webpack:///./src/app/doctor/docregiser/docregiser.page.ts"],"names":[],"mappings":"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","file":"doctor-docregiser-docregiser-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DocregiserPage } from './docregiser.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DocregiserPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [DocregiserPage]\n})\nexport class DocregiserPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-button (click)=\\\"back()\\\" >\\n            <ion-icon name=\\\"arrow-back\\\"  ></ion-icon>\\n          </ion-button>\\n        </ion-buttons>\\n    <ion-title>Doctor Regiser</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <form [formGroup]=\\\"validations_form\\\" >\\n\\n    <ion-card>\\n\\n        <ion-grid>\\n           \\n         \\n           \\n       \\n          <ion-row>\\n      \\n          \\n                <ion-col>\\n                </ion-col>  \\n          </ion-row> \\n          <ion-row>   \\n          <ion-col size=\\\"6\\\">\\n           \\n            <ion-item>\\n              <ion-label  position=\\\"floating\\\" ><small>full_name</small></ion-label>\\n              <ion-input formControlName=\\\"docter_name\\\"  ></ion-input>\\n              \\n            </ion-item>\\n            <ng-container *ngFor=\\\"let validation of validation_messages.docter_name\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('docter_name').hasError(validation.type) && (validations_form.get('docter_name').dirty || validations_form.get('docter_name').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n              </ion-col>\\n    \\n              <ion-col size=\\\"6\\\">\\n           \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" ><small>Password</small></ion-label>\\n                  <ion-input formControlName=\\\"password\\\"  ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n\\n\\n              <ion-col>\\n           \\n                <ion-item >\\n                  <ion-label  position=\\\"floating\\\" ><small>Gender</small></ion-label>\\n                  <ion-select  formControlName=\\\"sex\\\" \\n                  >\\n                  <ion-select-option value=\\\"Male\\\">Male</ion-select-option>\\n                  <ion-select-option value=\\\"FeMale\\\">FeMale</ion-select-option>\\n              \\n                  </ion-select>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.sex\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('sex').hasError(validation.type) && (validations_form.get('sex').dirty || validations_form.get('sex').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n    \\n        </ion-row>\\n        \\n\\n          <ion-row>\\n              <ion-col size=\\\"6\\\">\\n               \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" ><small>Speciality</small></ion-label>\\n                  <ion-input formControlName=\\\"speciality\\\" ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.speciality\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('speciality').hasError(validation.type) && (validations_form.get('speciality').dirty || validations_form.get('speciality').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n                \\n          </ion-row>\\n          <ion-row>\\n                      <ion-col size=\\\"6\\\">\\n                   \\n               \\n                        <ion-item>\\n                          <ion-label position=\\\"floating\\\" ><small>Email Id</small></ion-label>\\n                          <ion-input   formControlName=\\\"email\\\" ></ion-input>\\n                          \\n                        </ion-item>\\n      \\n                        <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n                              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                            </div>\\n                          </ng-container>\\n                      </ion-col>\\n        \\n           \\n            \\n          \\n                <ion-col>\\n                 \\n              <ion-item >\\n                <ion-label position=\\\"floating\\\" ><small>Address</small></ion-label>\\n                <ion-input   formControlName=\\\"clinic_address\\\"  ></ion-input>\\n                \\n              </ion-item>\\n              <ng-container *ngFor=\\\"let validation of validation_messages.clinic_address\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('clinic_address').hasError(validation.type) && (validations_form.get('clinic_address').dirty || validations_form.get('clinic_address').touched)\\\">\\n                    <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                  </div>\\n                </ng-container>\\n                </ion-col>\\n          \\n              </ion-row>\\n    \\n         \\n            \\n             \\n            \\n              <ion-row>\\n                \\n                    <ion-col size=\\\"6\\\">\\n                       \\n               \\n                      <ion-item>\\n                          <ion-label position=\\\"floating\\\" ><small>City</small></ion-label>\\n                          <ion-input   formControlName=\\\"city\\\"  ></ion-input> \\n                      </ion-item>\\n    \\n                      <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                    </ion-col>\\n                 \\n            \\n                  \\n                    <ion-col size=\\\"6\\\">\\n                   \\n               \\n                        <ion-item>\\n\\n                            <ion-label position=\\\"floating\\\" ><small>State</small></ion-label>\\n                            <ion-input   formControlName=\\\"state\\\"  ></ion-input> \\n\\n\\n                  \\n                        </ion-item>\\n      \\n                        <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n                            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n                              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                            </div>\\n                          </ng-container>\\n                      </ion-col>\\n\\n\\n                      <ion-col size=\\\"6\\\">\\n                   \\n               \\n                          <ion-item>\\n                              <ion-label position=\\\"floating\\\" ><small>Hospital</small></ion-label>\\n                              <ion-input   formControlName=\\\"hospital\\\"  ></ion-input> \\n                          </ion-item>\\n        \\n                          <ng-container *ngFor=\\\"let validation of validation_messages.hospital\\\">\\n                              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('hospital').hasError(validation.type) && (validations_form.get('hospital').dirty || validations_form.get('hospital').touched)\\\">\\n                                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                              </div>\\n                            </ng-container>\\n                        </ion-col>\\n\\n                        <ion-col size=\\\"6\\\">\\n                   \\n               \\n                          <ion-item>\\n                              <ion-label position=\\\"floating\\\" ><small>Phone No</small></ion-label>\\n                              <ion-input  type=\\\"number\\\" formControlName=\\\"docter_phone\\\"  ></ion-input> \\n                          </ion-item>\\n        \\n                          <ng-container *ngFor=\\\"let validation of validation_messages.docter_phone\\\">\\n                              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('docter_phone').hasError(validation.type) && (validations_form.get('docter_phone').dirty || validations_form.get('docter_phone').touched)\\\">\\n                                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                              </div>\\n                            </ng-container>\\n                        </ion-col>\\n            \\n                </ion-row>\\n               \\n                <div text-center>\\n                    <ion-button (click)=\\\"doctor()\\\" [disabled]=\\\"!validations_form.valid\\\" fill=\\\"outline\\\" shape=\\\"round\\\"><small>Save</small></ion-button>\\n                   \\n                            \\n                  </div>   \\n              \\n        \\n    </ion-grid>\\n      </ion-card>\\n     \\n        </form>\\n</ion-content>\\n\\n\\n\"","module.exports = \"ion-toolbar {\\n  --background: #138D75!important ;\\n  opacity: 1 !important; }\\n\\nion-title {\\n  color: #ffffff !important; }\\n\\nion-icon {\\n  color: #ffffff !important; }\\n\\n.error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZG9jdG9yL2RvY3JlZ2lzZXIvRDpcXG5ld2FwcG9sb1xcYXBwb2xvL3NyY1xcYXBwXFxkb2N0b3JcXGRvY3JlZ2lzZXJcXGRvY3JlZ2lzZXIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0NBQWE7RUFDYixxQkFBbUIsRUFBQTs7QUFFdkI7RUFDSSx5QkFBMEIsRUFBQTs7QUFFOUI7RUFDSSx5QkFBMEIsRUFBQTs7QUFFOUI7RUFFRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2RvY3Rvci9kb2NyZWdpc2VyL2RvY3JlZ2lzZXIucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLXRvb2xiYXJ7XHJcbiAgICAtLWJhY2tncm91bmQ6ICMxMzhENzUhaW1wb3J0YW50IDtcclxuICAgIG9wYWNpdHk6MSFpbXBvcnRhbnQ7IFxyXG59XHJcbmlvbi10aXRsZXtcclxuICAgIGNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQgOyBcclxufVxyXG5pb24taWNvbntcclxuICAgIGNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQgOyBcclxufVxyXG4uZXJyb3ItbWVzc2FnZVxyXG57XHJcbiAgY29sb3I6IHJlZDtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4iXX0= */\"","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ModalController, NavController } from '@ionic/angular';\nimport { AuthService } from 'src/app/auth.service';\n\n@Component({\n  selector: 'app-docregiser',\n  templateUrl: './docregiser.page.html',\n  styleUrls: ['./docregiser.page.scss'],\n})\nexport class DocregiserPage implements OnInit {\n\n  @Input() value: number;\n  id: any;\n  public validations_form: FormGroup;\n  result: any;\n\n  constructor(public nav:NavController,public modalController:ModalController,public auth:AuthService,public formBuilder: FormBuilder) { \n    // this.id= navParams.get(\"value\");\n    // console.log(this.id);\n   this.validations_form = formBuilder.group({\n\n\n  \n    docter_name: ['', Validators.required],\n    sex: ['', Validators.required],\n    speciality: ['', Validators.required],\n    email: ['', Validators.required],\n    clinic_address: ['', Validators.required],\n    city: ['', Validators.required],\n    state: ['', Validators.required],\n    hospital: ['', Validators.required],\n    docter_phone: ['', Validators.required],\n    password: ['', Validators.required],\n\n    \n\n   \n});\n\n  }\n\n  ngOnInit() {\n  \n  }\n  back()\n  {\n   this.nav.pop(); //this.dismiss()\n  }\n\n \n  doctor() {\n    this.auth.presentLoading();\n    console.log(56, this.validations_form.value)\n      this.auth.doctor(this.validations_form.value).subscribe(res => {\n       this.result=res;\n     \n        if (res.status == 'success') {\n         this.auth.addNewBookData.next(res.response);\n         this.auth.presentToast(\"Doctor added successfully\");\n         this.nav.pop();\n\n        }\n      }, (err) => {\n        console.log(err)\n      if(err.error.message.code==\"11000\")\n      {\n        this.auth.presentToast(\"phone number already registered\");\n  \n      }\n      else{\n       this.auth.presentToast(err.error.message.error);\n      }\n     });\n      \n    }\n\n  validation_messages = {\n   \n    'docter_name': [\n      { type: 'required', message: 'name is required.' },\n      { type: 'minlength', message: 'name must be at least 1 characters long.' },\n      //{ type: 'pattern', message: 'Your password must contain only numbers and letters.' },\n    ],\n    'age': [\n      { type: 'required', message: 'age is required.' },],\n\n    'password': [\n       { type: 'required', message: 'password is required.' }],\n    'date_of_birth': [\n          { type: 'required', message: 'date_of_birth is required.' },\n        ],\n    'email': [\n            { type: 'required', message: 'email_id is required.' }\n           ],\n           'speciality': [\n            { type: 'required', message: 'speciality is required.' }\n           ],\n           'docter_phone': [\n            { type: 'required', message: 'docter_phone is required.' }\n           ],\n           \n    'clinic_address': [\n              { type: 'required', message: 'address  is required.' }],\n              'city': [\n                { type: 'required', message: 'city  is required.' }],\n                'state': [\n                   { type: 'required', message: 'state  is required.' }],\n                      'hospital': [\n                    { type: 'required', message: 'hospital  is required.' }],\n                    'sex': [\n                      { type: 'required', message: 'gender  is required.' }],\n                  \n  };\n  close()\n  {\n    this.modalController.dismiss({\n      'result': \"1\"\n    })\n    //this.dismiss()\n  }\n\n \n}\n"],"sourceRoot":""}