{"version":3,"sources":["webpack:///./src/app/labs/addnewlab/addnewlab.module.ts","webpack:///./src/app/labs/addnewlab/addnewlab.page.html","webpack:///./src/app/labs/addnewlab/addnewlab.page.scss","webpack:///./src/app/labs/addnewlab/addnewlab.page.ts"],"names":[],"mappings":"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","file":"labs-addnewlab-addnewlab-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AddnewlabPage } from './addnewlab.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddnewlabPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AddnewlabPage]\n})\nexport class AddnewlabPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-button (click)=\\\"back()\\\" >\\n            <ion-icon name=\\\"arrow-back\\\"  ></ion-icon>\\n          </ion-button>\\n        </ion-buttons>\\n    <ion-title>Lab Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <form [formGroup]=\\\"validations_form\\\" >\\n\\n    <ion-card>\\n\\n        <ion-grid>\\n           \\n         \\n           \\n       \\n          <ion-row>\\n      \\n          \\n                <ion-col>\\n                </ion-col>  \\n          </ion-row> \\n          <ion-row>   \\n          <ion-col size=\\\"6\\\">\\n           \\n            <ion-item>\\n              <ion-label  position=\\\"floating\\\" ><small>name</small></ion-label>\\n              <ion-input formControlName=\\\"name\\\"  ></ion-input>\\n              \\n            </ion-item>\\n            <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n              </ion-col>\\n    \\n              <ion-col size=\\\"6\\\">\\n           \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" ><small>Password</small></ion-label>\\n                  <ion-input formControlName=\\\"password\\\"  ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n    \\n        </ion-row>\\n        \\n\\n    \\n          <ion-row>\\n                \\n        \\n           \\n            \\n          \\n                <ion-col size=\\\"6\\\">\\n                 \\n              <ion-item >\\n                <ion-label position=\\\"floating\\\" ><small>Address</small></ion-label>\\n                <ion-input   formControlName=\\\"address\\\"  ></ion-input>\\n                \\n              </ion-item>\\n              <ng-container *ngFor=\\\"let validation of validation_messages.address\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('address').hasError(validation.type) && (validations_form.get('address').dirty || validations_form.get('address').touched)\\\">\\n                    <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                  </div>\\n                </ng-container>\\n                </ion-col>\\n                <ion-col size=\\\"6\\\">\\n                       \\n               \\n                  <ion-item>\\n                      <ion-label position=\\\"floating\\\" ><small>phone no</small></ion-label>\\n                      <ion-input  type=\\\"number\\\" formControlName=\\\"lab_phone\\\"  ></ion-input> \\n                  </ion-item>\\n\\n                  <ng-container *ngFor=\\\"let validation of validation_messages.lab_phone\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lab_phone').hasError(validation.type) && (validations_form.get('lab_phone').dirty || validations_form.get('lab_phone').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                      </div>\\n                    </ng-container>\\n                </ion-col>\\n              </ion-row>\\n    \\n         \\n            \\n             \\n            \\n              <ion-row>\\n                \\n                    <ion-col size=\\\"6\\\">\\n                       \\n               \\n                      <ion-item>\\n                          <ion-label position=\\\"floating\\\" ><small>City</small></ion-label>\\n                          <ion-input   formControlName=\\\"city\\\"  ></ion-input> \\n                      </ion-item>\\n    \\n                      <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                    </ion-col>\\n                 \\n            \\n                  \\n                    <ion-col size=\\\"6\\\">\\n                   \\n               \\n                        <ion-item>\\n\\n                            <ion-label position=\\\"floating\\\" ><small>State</small></ion-label>\\n                            <ion-input   formControlName=\\\"state\\\"  ></ion-input> \\n\\n\\n                  \\n                        </ion-item>\\n      \\n                        <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n                            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n                              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                            </div>\\n                          </ng-container>\\n                      </ion-col>\\n\\n\\n                     \\n            \\n                </ion-row>\\n               \\n                <div text-center>\\n                    <ion-button (click)=\\\"labregister(validations_form)\\\" [disabled]=\\\"!validations_form.valid\\\" fill=\\\"outline\\\" shape=\\\"round\\\"><small>Save</small></ion-button>\\n                   \\n                            \\n                  </div>   \\n              \\n        \\n    </ion-grid>\\n      </ion-card>\\n     \\n        </form>\\n</ion-content>\\n\\n\\n\"","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\nion-toolbar {\\n  --background: #138D75!important ;\\n  opacity: 1 !important; }\\n\\nion-title {\\n  color: #ffffff !important; }\\n\\nion-icon {\\n  color: #ffffff !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGFicy9hZGRuZXdsYWIvRDpcXG5ld2FwcG9sb1xcc2lkZHVzYWkuZ2l0XFx0cnVuay9zcmNcXGFwcFxcbGFic1xcYWRkbmV3bGFiXFxhZGRuZXdsYWIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCLEVBQUE7O0FBRWxCO0VBQ0UsZ0NBQWE7RUFDYixxQkFBbUIsRUFBQTs7QUFHckI7RUFDRSx5QkFBMEIsRUFBQTs7QUFFNUI7RUFDRSx5QkFBMEIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2xhYnMvYWRkbmV3bGFiL2FkZG5ld2xhYi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxyXG57XHJcbiAgY29sb3I6IHJlZDtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5pb24tdG9vbGJhcntcclxuICAtLWJhY2tncm91bmQ6ICMxMzhENzUhaW1wb3J0YW50IDtcclxuICBvcGFjaXR5OjEhaW1wb3J0YW50OyBcclxufVxyXG5cclxuaW9uLXRpdGxle1xyXG4gIGNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQgOyBcclxufVxyXG5pb24taWNvbiB7XHJcbiAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudCA7ICBcclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\nimport { NavController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-addnewlab',\n  templateUrl: './addnewlab.page.html',\n  styleUrls: ['./addnewlab.page.scss'],\n})\nexport class AddnewlabPage implements OnInit {\n\n  validations_form: FormGroup;\n  constructor(private fb: FormBuilder,public nav:NavController,\n    private router: Router, \n    // private formBuilder: FormBuilder,\n    protected auth: AuthService,\n    protected route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.createForm();\n  }\n  createForm() {\n    this.validations_form = this.fb.group({\n     \n    \n\n      name: ['',Validators.required],\n      lab_phone: ['',Validators.required],\n      address: ['',Validators.required],\n      city: ['',Validators.required],\n      state: ['',Validators.required],\n      password: ['',Validators.required],\n\n\n});\n  }\n\n  back()\n  {\n    this.nav.pop();\n  }\n\n  labregister(validations_form) {\n    \n    this.auth.lab(validations_form.value).subscribe(res=>{\n      if(res.status==\"success\"){\n        this.nav.pop();\n\n        this.auth.presentToast(\"saved successfully\");\n\n      }\n    }, (err) => {\n      console.log(err)\n    if(err.error.message.code==\"11000\")\n    {\n      this.auth.presentToast(\"phone number already registered\");\n\n    }\n    else{\n     this.auth.presentToast(err.error.message.error);\n    }\n   });\n    \n  }\n validation_messages = {\n \n  'name': [\n    { type: 'required', message: 'name is required.' },\n    { type: 'minlength', message: 'name must be at least 1 characters long.' },\n    //{ type: 'pattern', message: 'Your password must contain only numbers and letters.' },\n  ],\n  'lab_phone': [\n    { type: 'required', message: 'phone_no is required.' },],\n\n  'password': [\n       { type: 'required', message: 'password is required.' }],\n  'address': [\n        { type: 'required', message: 'address is required.' },\n      ],\n\n      \n         \n\n            'city': [\n              { type: 'required', message: 'city  is required.' }],\n              'state': [\n                 { type: 'required', message: 'state  is required.' }],\n               \n                \n};\n}\n"],"sourceRoot":""}