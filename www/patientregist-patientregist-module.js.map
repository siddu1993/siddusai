{"version":3,"sources":["webpack:///./src/app/patientregist/patientregist.module.ts","webpack:///./src/app/patientregist/patientregist.page.html","webpack:///./src/app/patientregist/patientregist.page.scss","webpack:///./src/app/patientregist/patientregist.page.ts"],"names":[],"mappings":"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","file":"patientregist-patientregist-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PatientregistPage } from './patientregist.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatientregistPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [PatientregistPage]\n})\nexport class PatientregistPageModule {}\n","module.exports = \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"back()\\\" >\\n              <ion-icon name=\\\"arrow-back\\\"  ></ion-icon>\\n            </ion-button>\\n          </ion-buttons>\\n      <ion-title>Patient Regisration</ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  \\n  <ion-content>\\n      <form [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"regester(validations_form)\\\"  >\\n  \\n      <ion-card>\\n  \\n          <ion-grid>\\n             \\n           \\n             \\n         \\n            <ion-row>\\n                <ion-col size=\\\"6\\\">\\n             \\n                    <ion-item>\\n                      <ion-label  position=\\\"floating\\\" ><small>Doctor Id</small></ion-label>\\n                      <ion-input formControlName=\\\"doctor_id\\\"  ></ion-input>\\n                      \\n                    </ion-item>\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.doctor_id\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('doctor_id').hasError(validation.type) && (validations_form.get('doctor_id').dirty || validations_form.get('doctor_id').touched)\\\">\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                        </div>\\n                      </ng-container>\\n                      </ion-col>\\n            \\n                  <ion-col>\\n                  </ion-col>  \\n            </ion-row> \\n            <ion-row>   \\n            <ion-col size=\\\"6\\\">\\n             \\n              <ion-item>\\n                <ion-label  position=\\\"floating\\\" ><small>full_name</small></ion-label>\\n                <ion-input formControlName=\\\"full_name\\\"  ></ion-input>\\n                \\n              </ion-item>\\n              <ng-container *ngFor=\\\"let validation of validation_messages.full_name\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('full_name').hasError(validation.type) && (validations_form.get('full_name').dirty || validations_form.get('full_name').touched)\\\">\\n                    <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                  </div>\\n                </ng-container>\\n                </ion-col>\\n      \\n            <ion-col>\\n             \\n          <ion-item >\\n            <ion-label  position=\\\"floating\\\" ><small>gender</small></ion-label>\\n            <ion-input type=\\\"number\\\" formControlName=\\\"gender\\\"  ></ion-input>\\n            \\n          </ion-item>\\n          <ng-container *ngFor=\\\"let validation of validation_messages.gender\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('gender').hasError(validation.type) && (validations_form.get('gender').dirty || validations_form.get('gender').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n            </ion-col>\\n      \\n          </ion-row>\\n          \\n  \\n            <ion-row>\\n                <ion-col size=\\\"6\\\">\\n                 \\n                  <ion-item>\\n                    <ion-label  position=\\\"floating\\\" ><small>date_of_birth</small></ion-label>\\n                    <ion-input formControlName=\\\"date_of_birth\\\" ></ion-input>\\n                    \\n                  </ion-item>\\n                  <ng-container *ngFor=\\\"let validation of validation_messages.date_of_birth\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('date_of_birth').hasError(validation.type) && (validations_form.get('date_of_birth').dirty || validations_form.get('date_of_birth').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                      </div>\\n                    </ng-container>\\n                    </ion-col>\\n                    <ion-col size=\\\"6\\\">\\n                 \\n                      <ion-item >\\n                        <ion-label  position=\\\"floating\\\" ><small>State</small></ion-label>\\n                        <ion-input  formControlName=\\\"state\\\"  ></ion-input>\\n                        \\n                      </ion-item>\\n                      <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n          \\n          \\n                        </ion-col>\\n            </ion-row>\\n            <ion-row>\\n                        <ion-col size=\\\"6\\\">\\n                     \\n                 \\n                          <ion-item>\\n                            <ion-label position=\\\"floating\\\" ><small>Email Id</small></ion-label>\\n                            <ion-input   formControlName=\\\"email\\\" ></ion-input>\\n                            \\n                          </ion-item>\\n        \\n                          <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n                                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                              </div>\\n                            </ng-container>\\n                        </ion-col>\\n          \\n             \\n              \\n            \\n                  <ion-col>\\n                   \\n                <ion-item >\\n                  <ion-label position=\\\"floating\\\" ><small>Address</small></ion-label>\\n                  <ion-input   formControlName=\\\"address\\\"  ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.adress\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('adress').hasError(validation.type) && (validations_form.get('adress').dirty || validations_form.get('adress').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n            \\n                </ion-row>\\n      \\n           \\n              \\n               \\n              \\n                <ion-row>\\n                  \\n                      <ion-col size=\\\"6\\\">\\n                         \\n                 \\n                        <ion-item>\\n                            <ion-label position=\\\"floating\\\" ><small>City</small></ion-label>\\n                            <ion-input   formControlName=\\\"city\\\"  ></ion-input> \\n                        </ion-item>\\n      \\n                        <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n                            <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n                              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                            </div>\\n                          </ng-container>\\n                      </ion-col>\\n                   \\n              \\n                    \\n                      <ion-col size=\\\"6\\\">\\n                     \\n                 \\n                          <ion-item>\\n  \\n                              <ion-label position=\\\"floating\\\" ><small>State</small></ion-label>\\n                              <ion-input   formControlName=\\\"state\\\"  ></ion-input> \\n  \\n  \\n                    \\n                          </ion-item>\\n        \\n                          <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n                              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n                                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                              </div>\\n                            </ng-container>\\n                        </ion-col>\\n  \\n  \\n                        <ion-col size=\\\"6\\\">\\n                     \\n                 \\n                            <ion-item>\\n                                <ion-label position=\\\"floating\\\" ><small>phone_no</small></ion-label>\\n                                <ion-input   formControlName=\\\"phone_no\\\"  ></ion-input> \\n                            </ion-item>\\n          \\n                            <ng-container *ngFor=\\\"let validation of validation_messages.phone_no\\\">\\n                                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('phone_no').hasError(validation.type) && (validations_form.get('phone_no').dirty || validations_form.get('phone_no').touched)\\\">\\n                                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                                </div>\\n                              </ng-container>\\n                          </ion-col>\\n              \\n                  </ion-row>\\n                 \\n                  <div text-center>\\n                      <ion-button (click)=\\\"regester(validations_form)\\\" [disabled]=\\\"!validations_form.valid\\\" fill=\\\"outline\\\" shape=\\\"round\\\"><small>Save</small></ion-button>\\n                     \\n                              \\n                    </div>   \\n                \\n          \\n      </ion-grid>\\n        </ion-card>\\n       \\n          </form>\\n  </ion-content>\\n  \\n  \\n  \"","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\nion-toolbar {\\n  --background: #138D75!important ;\\n  opacity: 1 !important; }\\n\\nion-title {\\n  color: #ffffff !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHJlZ2lzdC9EOlxccmV0YWlsZXJcXGFwcG9sby9zcmNcXGFwcFxccGF0aWVudHJlZ2lzdFxccGF0aWVudHJlZ2lzdC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0IsRUFBQTs7QUFFbEI7RUFDRSxnQ0FBYTtFQUNiLHFCQUFtQixFQUFBOztBQUVyQjtFQUNFLHlCQUEwQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvcGF0aWVudHJlZ2lzdC9wYXRpZW50cmVnaXN0LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1tZXNzYWdlXHJcbntcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmlvbi10b29sYmFye1xyXG4gIC0tYmFja2dyb3VuZDogIzEzOEQ3NSFpbXBvcnRhbnQgO1xyXG4gIG9wYWNpdHk6MSFpbXBvcnRhbnQ7IFxyXG59XHJcbmlvbi10aXRsZXtcclxuICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50IDsgXHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ModalController, NavController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-patientregist',\n  templateUrl: './patientregist.page.html',\n  styleUrls: ['./patientregist.page.scss'],\n})\nexport class PatientregistPage implements OnInit {\n\n  validations_form: FormGroup;\n  patientData:any;\n  patient:any\n  constructor(private fb: FormBuilder,\n            protected auth: AuthService,\n            protected route: ActivatedRoute,\n            private router: Router, \n            private nav: NavController, \n    ) { }\n\n  ngOnInit() {\n     this.createForm();\n  }\n  createForm() {\n    this.validations_form = this.fb.group({\n     // patient_id: ['', Validators.required],\n      full_name: ['',Validators.required],\n      date_of_birth: ['',Validators.required],\n      email: ['',Validators.required],\n      address: ['',Validators.required],\n      city: ['',Validators.required],\n      state:['',Validators.required],\n      sex:['',Validators.required],\n      age: ['',Validators.required],\n      phone_no:['',Validators.required],\n    });\n  }\n  regester() {\n \n  this.auth.newpatient(this.validations_form.value).subscribe(res=>{\n    if(res.status==\"success\"){\n      if(res.status=='success'){\n        this.auth.presentToast(\"registered successfully\");\n\n        this.nav.pop();\n        this.router.navigateByUrl('/login');\n\n      }\n    }\n  })\n\n}\nvalidation_messages = {\n \n  'full_name': [\n    { type: 'required', message: 'name is required.' },\n    { type: 'minlength', message: 'name must be at least 1 characters long.' },\n    //{ type: 'pattern', message: 'Your password must contain only numbers and letters.' },\n  ],\n  'age': [\n    { type: 'required', message: 'age is required.' },],\n\n  // 'phone': [\n  //     { type: 'required', message: 'phone is required.' }],\n  'date_of_birth': [\n        { type: 'required', message: 'date_of_birth is required.' },\n      ],\n  'email_id': [\n          { type: 'required', message: 'email_id is required.' }\n         ],\n      \n         \n  'address': [\n            { type: 'required', message: 'address  is required.' }],\n            'city': [\n              { type: 'required', message: 'city  is required.' }],\n              'state': [\n                 { type: 'required', message: 'state  is required.' }],\n                    'hospital': [\n                  { type: 'required', message: 'hospital  is required.' }],\n                \n};\n}\n"],"sourceRoot":""}