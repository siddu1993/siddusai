{"version":3,"sources":["webpack:///./src/app/labs/labtestupdate/labtestupdate.module.ts","webpack:///./src/app/labs/labtestupdate/labtestupdate.page.html","webpack:///./src/app/labs/labtestupdate/labtestupdate.page.scss","webpack:///./src/app/labs/labtestupdate/labtestupdate.page.ts"],"names":[],"mappings":"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","file":"labs-labtestupdate-labtestupdate-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LabtestupdatePage } from './labtestupdate.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LabtestupdatePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    \n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LabtestupdatePage]\n})\nexport class LabtestupdatePageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Lab Test update</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n        <ion-button (click)=\\\"back()\\\" >\\n          <ion-icon name=\\\"arrow-back\\\"></ion-icon>\\n        </ion-button>\\n      </ion-buttons>\\n    \\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n<ion-content>\\n\\n\\n\\n  \\n   \\n            <div *ngFor=\\\"let form_elem of test_res; let i=index\\\" >\\n       <ion-card>\\n          {{i}}\\n         <ion-item>\\n            <small  slot=\\\"start\\\"><ion-label>{{form_elem.name}}</ion-label></small>\\n            <small  slot=\\\"end\\\"><ion-input  [(ngModel)]=\\\"sname[i]\\\"    type=\\\"text\\\"  placeholder=\\\"{{form_elem.name}}\\\"></ion-input></small>\\n         </ion-item>\\n         <ion-item>\\n            <small slot=\\\"start\\\"> <ion-label >Units</ion-label></small>\\n\\n          <small>   <select    [(ngModel)]=\\\"unit[i]\\\" >\\n              <option *ngFor=\\\"let obj of read\\\"  placeholder=\\\"units\\\"  value=\\\"{{obj.unit}}\\\">{{obj.unit }}</option>\\n            </select></small>\\n            </ion-item>\\n\\n             <ion-item>\\n                <small slot=\\\"start\\\"> <ion-label >Method</ion-label></small>\\n    \\n              <small>   <select    [(ngModel)]=\\\"method[i]\\\" >\\n                  <option *ngFor=\\\"let obj of read\\\" placeholder=\\\"units\\\"  value=\\\"{{obj.method}}\\\">{{obj.method }}</option>\\n                </select></small>\\n                </ion-item> \\n\\n                \\n             <ion-item>\\n              <small slot=\\\"start\\\"> <ion-label  class=\\\"fon\\\">Bio ref Range  {{form_elem.range}}</ion-label></small>\\n  \\n         \\n              </ion-item> \\n            </ion-card>\\n           </div>\\n\\n      \\n         <small *ngIf=\\\"sts!=1\\\"> <ion-button size=\\\"small\\\"  (click)=\\\"sub()\\\" >Save</ion-button></small>\\n         <small *ngIf=\\\"sts==1\\\"> <ion-button size=\\\"small\\\"  (click)=\\\"sub()\\\" >Update</ion-button></small>\\n\\n\\n     \\n      \\n\\n\\n\\n    \\n    <!-- <div  *ngFor=\\\"let obj of test_res; let i = index;\\\" [formGroupName]=\\\"i\\\">\\n      <label>{{obj.name}}</label>\\n      <input formControlName=\\\"name\\\" placeholder='obj.name'>\\n      <input formControlName=\\\"description\\\" placeholder=\\\"messurement\\\">\\n    <input formControlName=\\\"price\\\" placeholder=\\\"{{Item.price}}\\\"> \\n    </div>\\n   -->\\n\\n\\n\\n\\n\\n    <!-- <form [formGroup]=\\\"labupdateForm\\\">\\n    <ion-item>\\n       <small slot=\\\"start\\\"> <ion-label>Ref Dr Name:</ion-label></small>\\n        <ion-input  formControlName='docter_name' placeholder=\\\"doctor name\\\"></ion-input>\\n      </ion-item>\\n\\n\\n    <ion-item>\\n        <small slot=\\\"start\\\">  <ion-label>Test Name:</ion-label></small>\\n  <ion-select slot=\\\"end\\\" formControlName=\\\"test_name\\\" \\n  placeholder=\\\"test name\\\">\\n  <ion-select-option >Blood test</ion-select-option>\\n\\n  <ion-select-option >Sugar</ion-select-option>\\n  <ion-select-option >Dengu</ion-select-option>\\n  <ion-select-option >Thiroud</ion-select-option>\\n\\n  <ion-select-option >Malaria</ion-select-option>\\n \\n  </ion-select>\\n    </ion-item>\\n\\n  <ion-item>\\n      <small slot=\\\"start\\\">  <ion-label>Select patient:</ion-label></small>\\n\\n    <ion-select slot=\\\"end\\\" formControlName =\\\"child_name\\\">\\n        <ion-select-option  value=\\\"\\\">{{name}}</ion-select-option>\\n        <ion-select-option *ngFor=\\\"let obj of alllist\\\"  value=\\\"{{obj.name}}\\\">{{obj.name }}</ion-select-option>\\n      </ion-select></ion-item>\\n\\n<div>\\n    <h6 padding>Test Results</h6>\\n</div>\\n\\n<ion-card>\\n\\n    <ion-grid>\\n           \\n         \\n           \\n       \\n        <ion-row>\\n            <ion-col size=\\\"6\\\">\\n         \\n                <ion-item>\\n                  <ion-label  position=\\\"floating\\\" ><small>Total Cholestrol</small></ion-label>\\n                  <ion-input  type=\\\"number\\\" formControlName=\\\"total_cholestrol\\\"  ></ion-input>\\n                  \\n                </ion-item>\\n                <ng-container *ngFor=\\\"let validation of validation_messages.total_cholestrol\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('total_cholestrol').hasError(validation.type) && (labupdateForm.get('total_cholestrol').dirty || labupdateForm.get('total_cholestrol').touched)\\\">\\n                      <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                    </div>\\n                  </ng-container>\\n                  </ion-col>\\n        \\n              <ion-col>\\n              </ion-col>  \\n        </ion-row> \\n        <ion-row>   \\n        <ion-col size=\\\"6\\\">\\n         \\n          <ion-item>\\n            <ion-label  position=\\\"floating\\\" ><small>Triglycerides</small></ion-label>\\n            <ion-input  type=\\\"number\\\" formControlName=\\\"tri_glycerides\\\"  ></ion-input>\\n            \\n          </ion-item>\\n          <ng-container *ngFor=\\\"let validation of validation_messages.tri_glycerides\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('tri_glycerides').hasError(validation.type) && (labupdateForm.get('tri_glycerides').dirty || labupdateForm.get('tri_glycerides').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n            </ion-col>\\n  \\n        <ion-col>\\n         \\n      <ion-item >\\n        <ion-label  position=\\\"floating\\\" ><small>HDL</small></ion-label>\\n        <ion-input type=\\\"number\\\" formControlName=\\\"hdl\\\"  ></ion-input>\\n        \\n      </ion-item>\\n      <ng-container *ngFor=\\\"let validation of validation_messages.hdl\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('hdl').hasError(validation.type) && (labupdateForm.get('hdl').dirty || labupdateForm.get('hdl').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n        </ion-col>\\n  \\n      </ion-row>\\n      \\n\\n        <ion-row>\\n            <ion-col size=\\\"6\\\">\\n             \\n              <ion-item>\\n                <ion-label  position=\\\"floating\\\" ><small>No hdl</small></ion-label>\\n                <ion-input  type=\\\"number\\\" formControlName=\\\"no_hdl\\\" ></ion-input>\\n                \\n              </ion-item>\\n              <ng-container *ngFor=\\\"let validation of validation_messages.no_hdl\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('no_hdl').hasError(validation.type) && (labupdateForm.get('no_hdl').dirty || labupdateForm.get('no_hdl').touched)\\\">\\n                    <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                  </div>\\n                </ng-container>\\n                </ion-col>\\n                <ion-col size=\\\"6\\\">\\n             \\n                  <ion-item >\\n                    <ion-label  position=\\\"floating\\\" ><small>LDL</small></ion-label>\\n                    <ion-input  type=\\\"number\\\"  formControlName=\\\"ldl\\\"  ></ion-input>\\n                    \\n                  </ion-item>\\n                  <ng-container *ngFor=\\\"let validation of validation_messages.ldl\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('ldl').hasError(validation.type) && (labupdateForm.get('ldl').dirty || labupdateForm.get('ldl').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                      </div>\\n                    </ng-container>\\n      \\n      \\n                    </ion-col>\\n        </ion-row>\\n        <ion-row>\\n                    <ion-col size=\\\"6\\\">\\n                 \\n             \\n                      <ion-item>\\n                        <ion-label position=\\\"floating\\\" ><small>Vldl</small></ion-label>\\n                        <ion-input   type=\\\"number\\\" formControlName=\\\"vldl\\\" ></ion-input>\\n                        \\n                      </ion-item>\\n    \\n                      <ng-container *ngFor=\\\"let validation of validation_messages.vldl\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('vldl').hasError(validation.type) && (labupdateForm.get('vldl').dirty || labupdateForm.get('vldl').touched)\\\">\\n                            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                    </ion-col>\\n      \\n         \\n          \\n        \\n              <ion-col>\\n               \\n            <ion-item >\\n              <ion-label position=\\\"floating\\\" ><small>CHOL/HDL ratio</small></ion-label>\\n              <ion-input  type=\\\"number\\\"  formControlName=\\\"chol_ratio\\\"  ></ion-input>\\n              \\n            </ion-item>\\n            <ng-container *ngFor=\\\"let validation of validation_messages.chol_ratio\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"labupdateForm.get('chol_ratio').hasError(validation.type) && (labupdateForm.get('chol_ratio').dirty || labupdateForm.get('chol_ratio').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n              </ion-col>\\n        \\n            </ion-row>\\n  \\n              <div text-center>\\n                  <ion-button (click)=\\\"update(labupdateForm)\\\"  fill=\\\"outline\\\" shape=\\\"round\\\"><small>Save</small></ion-button>\\n                 \\n                          \\n                </div>   \\n            \\n      \\n  </ion-grid>\\n</ion-card>\\n</form> -->\\n\\n</ion-content>\\n\"","module.exports = \"ion-toolbar {\\n  --background: #138D75!important ;\\n  opacity: 1 !important; }\\n\\nion-title {\\n  color: #ffffff !important; }\\n\\nion-icon {\\n  color: #ffffff !important; }\\n\\n.error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\n.fon {\\n  font-size: 9px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGFicy9sYWJ0ZXN0dXBkYXRlL0Q6XFxuZXdhcHBvbG9cXHNpZGR1c2FpLmdpdFxcdHJ1bmsvc3JjXFxhcHBcXGxhYnNcXGxhYnRlc3R1cGRhdGVcXGxhYnRlc3R1cGRhdGUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0NBQWE7RUFDYixxQkFBbUIsRUFBQTs7QUFFdkI7RUFDSSx5QkFBMEIsRUFBQTs7QUFFOUI7RUFDSSx5QkFBMEIsRUFBQTs7QUFFOUI7RUFFRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0IsRUFBQTs7QUFFbEI7RUFDSSxjQUFjLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9sYWJzL2xhYnRlc3R1cGRhdGUvbGFidGVzdHVwZGF0ZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tdG9vbGJhcntcclxuICAgIC0tYmFja2dyb3VuZDogIzEzOEQ3NSFpbXBvcnRhbnQgO1xyXG4gICAgb3BhY2l0eToxIWltcG9ydGFudDsgXHJcbn1cclxuaW9uLXRpdGxle1xyXG4gICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudCA7IFxyXG59XHJcbmlvbi1pY29ue1xyXG4gICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudCA7IFxyXG59XHJcbi5lcnJvci1tZXNzYWdlXHJcbntcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5mb257XHJcbiAgICBmb250LXNpemU6IDlweDtcclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators, FormGroup, FormArray } from '@angular/forms';\nimport { ModalController, NavController } from '@ionic/angular';\nimport { AuthService } from 'src/app/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ThrowStmt } from '@angular/compiler';\n\ndeclare var swal; \n@Component({\n  selector: 'app-labtestupdate',\n  templateUrl: './labtestupdate.page.html',\n  styleUrls: ['./labtestupdate.page.scss'],\n})\nexport class LabtestupdatePage implements OnInit {\n  public labupdateForm:FormGroup\n  userData: any;\n  patient_id: string;\n  name: string;\n  alllist: any;\n  test_id: any;\n  test_res: any;\n  myFormGroup:FormGroup;\nitems: FormArray;\n  read: any;\n\n  sname:any=[];\n  unit:any=[];\n  method:any=[];\n  range:any=[];\n  val: any[];\n  docter_id: any;\n  docter_name: any;\n  lab_name: any;\n  _id: any;\n  sts: any;\n  result: any;\n\n\n\n  constructor(public route:Router,private activatedRoute: ActivatedRoute,public nav:NavController,public modalController:ModalController,public auth:AuthService,public formBuilder: FormBuilder) {\n\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.test_res = JSON.parse(params['test_id']);\n      this.docter_id = params['docter_id'];\n      this.docter_name = params['docter_name'];\n      this.lab_name = params['lab_name'];\n      this._id = params['_id'];\n      this.sts = params['sts'];\n\n      \n\n\n\n \n      \n      console.log(\"hi test_id\", this.sts); // Print the parameter to the console. \n  });\n\n\n    this.userData=JSON.parse(localStorage.getItem(\"userData\"));\n    this.patient_id=localStorage.getItem(\"patient_id\")\n    this.name=localStorage.getItem(\"full_name\")\n\n    \n    this.readings();\n\n   }\n\n  ngOnInit() {\n if(this.sts==\"1\")\n {\n  this.getval(this._id);\n }\n   for(let i=0;i<this.test_res;i++)\n   {\n\n   \n    let group={}    \n    this.test_res.forEach(input_template=>{\n      group[input_template.name]=new FormControl('');\n      group[input_template._id]=new FormControl('');\n      group[i]=new FormControl('');\n\n     // this.myFormGroup = new FormGroup(group);\n\n    })\n    this.myFormGroup[i] = new FormGroup(group);\n\n  }\n\n    // this.orderForm = this.formBuilder.group({\n    //   name: '',\n    //   email: '',\n    //   items: this.test_res\n    // });\n\n  //   this.labupdateForm = this.formBuilder.group({\n\n  //     docter_name: new FormControl('', [Validators.required]),\n  //     test_name: new FormControl('', [Validators.required]),\n  //     total_cholestrol: new FormControl('', [Validators.required]),\n  //     tri_glycerides: new FormControl('', [Validators.required]),\n  //     hdl: new FormControl('', [Validators.required]),\n  //     no_hdl: new FormControl(\"\", [Validators.required]),\n  //     ldl: new FormControl('', [Validators.required]),\n  //     vldl: new FormControl('', [Validators.required]),\n  //     chol_ratio: new FormControl('', [Validators.required]),\n  //     patient_id: new FormControl(\"\", [Validators.required]),\n  //     child_name: new FormControl(\"\", [Validators.required])\n\n  \n     \n  // });\n  }\n\n  sub()\n  {\n\n  \nthis.val=[];\n    for(let i=0;i<this.test_res.length;i++)\n    {\nthis.val.push({\"name\":this.test_res[i].name,\"unit\":this.sname[i]+\" \"+this.unit[i],\"method\":this.method[i],\"range\":this.range[i]});\n    }\n \n    console.log('orm',JSON.stringify(this.val));\n\n    if(this.sts==1)\n    {\nthis.updateval();\n    }\n    else{\n      this.readsave();\n\n    }\n  }\n\n\n  updateval()\n  {\n     // this.labupdateForm .value.docter_id=this.docter_id;\n      this.auth.updateval({data:this.val,\"patient_id\": localStorage.getItem(\"patient_id\"),\"lab_id\":localStorage.getItem(\"lab_id\"),\"docter_id\":localStorage.getItem(\"docter_id\"),\n      \"docter_name\":this.docter_name,\"lab_name\":this.lab_name,\"_id\":this._id}).subscribe(res => {\n        \n        if (res.status == \"success\") {\n          if (res.response != \"\") {\n         this.read=res.response;\n         this.auth.presentToast(\"report successfully updated \");\n         this.route.navigateByUrl(\"/labinformation\");\n           // localStorage.setItem(\"full_name\",this.name);\n           // this.router.navigateByUrl(\"/patientsearch\");\n          }\n       \n        }\n      },\n         \n   \n         () => {\n           this.auth.presentToast(\"server failed, server details not exits \");\n       }\n       );\n     }\n\n\n\n  readsave()\n  {\n     // this.labupdateForm .value.docter_id=this.docter_id;\n      this.auth.readingsave({data:this.val,\"patient_id\": localStorage.getItem(\"patient_id\"),\"lab_id\":localStorage.getItem(\"lab_id\"),\"docter_id\":localStorage.getItem(\"docter_id\"),\n      \"docter_name\":this.docter_name,\"lab_name\":this.lab_name,\"_id\":this._id}).subscribe(res => {\n        \n        if (res.status == \"success\") {\n          if (res.response != \"\") {\n         this.read=res.response;\n         this.auth.presentToast(\"report successfully added \");\n         this.route.navigateByUrl(\"/labinformation\");\n           // localStorage.setItem(\"full_name\",this.name);\n           // this.router.navigateByUrl(\"/patientsearch\");\n          }\n       \n        }\n      },\n         \n   \n         () => {\n           this.auth.presentToast(\"server failed, server details not exits \");\n       }\n       );\n     }\n\n\n\n\n\n\n\n\n\n\n\n  validation_messages = {\n    'docter_name': [\n      // { type: 'required', message: 'upc is required.' },\n      { type: 'minlength', message: 'refdoc must be at least 1 characters long.' },\n      { type: 'maxlength', message: 'refdoc cannot be more than 20 characters long.' },\n      { type: 'validUsername', message: 'Your refdoc has already been taken.' }\n    ],\n    'test_name': [\n      { type: 'required', message: 'testname is required.' },\n      { type: 'minlength', message: 'test name must be at least 1 characters long.' },\n      //{ type: 'pattern', message: 'Your password must contain only numbers and letters.' },\n    ],\n    'total_cholestrol': [\n      { type: 'required', message: 'total  cholestrol is required.' },],\n      'tri_glycerides': [\n        { type: 'required', message: 'Triglycerides is required.' },],\n\n    // 'phone': [\n    //     { type: 'required', message: 'phone is required.' }],\n    'hdl': [\n          { type: 'required', message: 'hdl is required.' },\n        ],\n    'no_hdl': [\n            { type: 'required', message: 'no hdl is required.' }\n           ],\n    'address': [\n              { type: 'required', message: 'address  is required.' }],\n              'vldl': [\n                { type: 'required', message: 'vldl  is required.' }],\n                'ldl': [\n                  { type: 'required', message: 'ldl  is required.' }],\n                'chol_ratio': [\n                   { type: 'required', message: 'chol_ratio  is required.' }],\n                  \n  };\n\n\n\n\n\n  update(labupdateForm){\n    this.labupdateForm .value.patient_id=this.patient_id;\n   // this.labupdateForm .value.docter_id=this.docter_id;\n    this.auth.updates(labupdateForm.value).subscribe(res => {\n      \n      if (res.status == \"success\") {\n        if (res.response != \"\") {\n          this.nav.pop();\n\n          this.auth.presentToast(\"updated successfully\");\n\n       \n     console.log(\"21\",this.labupdateForm);\n         // localStorage.setItem(\"full_name\",this.name);\n         // this.router.navigateByUrl(\"/patientsearch\");\n        }\n     \n      }\n    },\n       \n \n       () => {\n      swal(\"server failed, server detils not exits \");\n     }\n     );\n   }\n\ngetval(e){\n    this.auth.readingedit({report_id:e}).subscribe(res => {\n      \n      if (res.status == \"success\") {\n        if (res.response != \"\") {\nthis.result=res.response[0].data;\nlet s=[];\n          for(let i=0;i<this.result.length;i++)\n          {\n             let r=(this.result[i].unit).split(\" \");\n\n\nthis.sname[i]=r[0];\nthis.method[i]=this.result[i].method;\nthis.range[i]=this.result[i].range;\n\nthis.unit[i]=r[1];\n          }\n      //    this.auth.presentToast(\"updated successfully\");\n\n       \n     console.log(\"21\",res.response);\n     \n        }\n     \n      }\n    },\n       \n \n       () => {\n      swal(\"server failed, server details not exits \");\n     }\n     );\n   }\n    \n         \n         readings()\n         {\n            // this.labupdateForm .value.docter_id=this.docter_id;\n             this.auth.readings().subscribe(res => {\n               \n               if (res.status == \"success\") {\n                 if (res.response != \"\") {\n                this.read=res.response;\n                  // localStorage.setItem(\"full_name\",this.name);\n                  // this.router.navigateByUrl(\"/patientsearch\");\n                 }\n              \n               }\n             },\n                \n          \n                () => {\n                  this.auth.presentToast(\"server failed, server details not exits \");\n              }\n              );\n            }\n         \n            onSubmit()\n            {\n            }\n\n            \n\n      back()\n      {\n        this.nav.pop();\n      }\n\n}\n"],"sourceRoot":""}